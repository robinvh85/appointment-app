{"version":3,"sources":["browserHistory.ts","components/layouts/MainLayout/styles.ts","components/layouts/TopMenu/styles.ts","components/layouts/TopMenu/index.tsx","components/layouts/MainLayout/index.tsx","components/Scheduler/helper.ts","components/Scheduler/styles.ts","components/Scheduler/index.tsx","pages/HomePage/styles.ts","pages/HomePage/index.tsx","pages/LoginPage/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["createBrowserHistory","Wrapper","styled","div","Header","Body","Footer","Menu","TopMenu","to","MainLayout","children","buildPosition","start","end","step","event","startHours","parseInt","split","startMins","startTime","moment","startOf","hour","minutes","eventFromHours","from","eventFromMins","eventFromTime","eventToHours","eventToMins","eventToTime","startPosition","duration","diff","asMinutes","endPosition","top","HEADER_HEIGHT","left","column","height","TimeColumn","TIME_COLUMN_WIDTH","FIRST_CELL_HEIGHT","CELL_HEIGHT","Column","COLUMN_WIDTH","Event","EVENT_WIDTH","Scheduler","columns","events","timeList","lapTime","endHours","endMins","endTime","totalMinutes","result","format","i","add","push","buildTimeList","className","map","time","index","key","text","_","style","content","HomePage","LoginPage","App","history","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34cfd27e.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  background-color: white;\n  width: 100%;\n  position: relative;\n`;\n\nexport const Header = styled.div`\n  background-color: grey;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n`;\n\nexport const Menu = styled.div`\n`;\n\nexport const Body = styled.div`\n  background-color: #FFFFFF;\n  /* height: 80vh; */\n  padding-top: 50px;\n  padding-bottom: 50px;\n`;\n\nexport const Footer = styled.div`\n  background-color: salmon;\n  height: 50px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  height: 50px;\n  line-height: 50px;\n  vertical-align: middle;\n`;\n\nexport const Menu = styled.div`\n  a {\n    margin-left: 20px;\n  }\n`;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Wrapper, Menu } from './styles';\n\nconst TopMenu = () => {\n  return (\n    <Wrapper>\n      <Menu>\n        <Link to='/'>Home</Link>\n        <Link to='/login'>Login</Link>\n      </Menu>\n    </Wrapper>\n  )\n}\n\nexport default TopMenu;","import React from 'react';\n\nimport { Wrapper, Body, Header, Footer } from './styles';\nimport TopMenu from 'components/layouts/TopMenu';\n\ntype Props = {\n  children: any\n}\n\nconst MainLayout = ({ children }: Props) => {\n  return (\n    <Wrapper>\n      <Header>\n        <TopMenu />\n      </Header>\n      <Body>\n        { children }\n      </Body>\n      <Footer>Footer</Footer>\n    </Wrapper>\n  );\n}\n\nexport default MainLayout;","import moment from 'moment';\n\nexport const HEADER_HEIGHT = 30;\nexport const FIRST_CELL_HEIGHT = 10;\nexport const TIME_COLUMN_WIDTH = 50;\nexport const COLUMN_WIDTH = 180;\nexport const EVENT_WIDTH = 170;\nexport const CELL_HEIGHT = 50;\n\nexport const buildTimeList = (start: string, end: string, lapTime: number) => {\n  const startHours = parseInt(start.split(':')[0]);\n  const startMins = parseInt(start.split(':')[1]);\n  const startTime = moment().startOf('day').hour(startHours).minutes(startMins);\n\n  const endHours = parseInt(end.split(':')[0]);\n  const endMins = parseInt(end.split(':')[1]);\n  const endTime = moment().startOf('day').hour(endHours).minutes(endMins);\n\n  var duration = moment.duration(endTime.diff(startTime));\n  var totalMinutes = duration.asMinutes();\n  const result = [startTime.format('HH:mm')];\n\n  for(let i = 0; i < totalMinutes / lapTime; i++ ) {\n    startTime.add(lapTime, 'minutes');\n    result.push(startTime.format('HH:mm'));\n  }\n\n  return result;\n}\n\nexport const buildPosition = (start: string, end: string, step: number, event: any) => {  \n  const startHours = parseInt(start.split(':')[0]);\n  const startMins = parseInt(start.split(':')[1]);\n  const startTime = moment().startOf('day').hour(startHours).minutes(startMins);\n\n  const eventFromHours = parseInt(event.from.split(':')[0]);\n  const eventFromMins = parseInt(event.from.split(':')[1]);\n  const eventFromTime = moment().startOf('day').hour(eventFromHours).minutes(eventFromMins);\n\n  const eventToHours = parseInt(event.to.split(':')[0]);\n  const eventToMins = parseInt(event.to.split(':')[1]);\n  const eventToTime = moment().startOf('day').hour(eventToHours).minutes(eventToMins);\n\n  const startPosition = moment.duration(eventFromTime.diff(startTime)).asMinutes() / step;\n  const endPosition = moment.duration(eventToTime.diff(eventFromTime)).asMinutes() / step;\n\n  return {\n    top: HEADER_HEIGHT + FIRST_CELL_HEIGHT + startPosition * CELL_HEIGHT,\n    left: TIME_COLUMN_WIDTH + (event.column - 1) * COLUMN_WIDTH,\n    height: endPosition * CELL_HEIGHT\n  };\n}","import styled from '@emotion/styled';\n\nimport { \n  HEADER_HEIGHT, \n  FIRST_CELL_HEIGHT,\n  TIME_COLUMN_WIDTH,\n  COLUMN_WIDTH,\n  EVENT_WIDTH,\n  CELL_HEIGHT\n} from './helper';\n\nconst borderColor = '#DDDDDD';\n\nexport const Wrapper = styled.div`\n  border: 1px solid ${borderColor};\n  margin-left: 50px;\n  position: relative;\n  display: flex;\n  font-size: 14px;\n`;\n\nexport const TimeColumn = styled.div`\n  width: ${TIME_COLUMN_WIDTH + 'px'};\n\n  .header {\n    height: ${HEADER_HEIGHT + 'px'};\n    box-sizing: border-box;\n  }\n\n  .first-cell {\n    border-top: 1px solid ${borderColor};\n    height: ${FIRST_CELL_HEIGHT + 'px'};\n    box-sizing: border-box;\n  }\n\n  .cell {\n    height: ${CELL_HEIGHT + 'px'};\n    padding: 4px 8px;\n    text-align: right;\n    box-sizing: border-box;\n    position: relative;\n\n    .content {\n      position: absolute;\n      top: -9px;\n      right: 4px;\n    }\n  }\n`;\n\nexport const Column = styled.div`\n  width: ${COLUMN_WIDTH + 'px'};\n  font-size: 13px;\n\n  .header {\n    text-align: center;\n    border-right: 1px solid ${borderColor};\n    height: ${HEADER_HEIGHT + 'px'};\n    line-height: ${HEADER_HEIGHT + 'px'};\n    vertical-align: middle;\n    box-sizing: border-box;\n  }\n\n  .first-cell {\n    border-top: 1px solid ${borderColor};\n    border-right: 1px solid ${borderColor};\n    height: ${FIRST_CELL_HEIGHT + 'px'};\n    box-sizing: border-box;\n  }\n\n  .cell {\n    border-top: 1px solid ${borderColor};\n    border-right: 1px solid ${borderColor};\n    height: ${CELL_HEIGHT + 'px'};\n    padding: 4px 8px;\n    box-sizing: border-box;\n  }\n`;\n\nexport const Event = styled.div`\n  position: absolute;\n  background: green;\n  width: ${EVENT_WIDTH + 'px'};\n  box-sizing: border-box;\n  padding: 4px 8px;\n  color: #FFFFFF;\n  box-sizing: border-box;\n  white-space: pre-line;\n`;","import React from 'react';\n\nimport { \n  Event,\n  Wrapper, \n  Column,\n  TimeColumn,\n} from './styles';\nimport { buildTimeList, buildPosition } from './helper';\n\ntype Props = {\n  step?: number; // in minutes\n  start?: any;\n  end?: any;\n  columns: Array<any>;\n  events: Array<any>;\n}\n\nconst Scheduler: React.FC<Props> = ({start='07:00', end='22:00', step=30, columns=[], events=[]}) => {\n  const timeList = buildTimeList(start, end, step);\n\n  return (\n    <Wrapper>\n      <TimeColumn>\n        <div className=\"header\"></div>\n        <div className=\"first-cell\"></div>\n        {\n          timeList.map((time, index) => (\n            <div className='cell' key={index}>\n              <div className='content'>{ time }</div>\n            </div>\n          ))\n        }\n      </TimeColumn>\n\n      {\n        columns.map((column, index) => (\n          <Column key={index}>\n            <div className=\"header\">{ column.text }</div>\n            <div className=\"first-cell\"></div>\n            {\n              timeList.map((_, index) => (\n                <div className='cell' key={index}>{}</div>\n              ))\n            }\n          </Column>\n        ))\n      }\n      {\n        events.map((event, index) => (\n          <Event style={ buildPosition(start, end, step, event) } key={index}>{ `${event.from} - ${event.to}\\n${event.content}` }</Event>  \n        ))\n      }\n    </Wrapper>\n  )\n}\n\nexport default Scheduler;","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  margin-top: 20px;\n`;","import React from 'react';\n\nimport MainLayout from 'components/layouts/MainLayout';\nimport Scheduler from 'components/Scheduler';\nimport { Wrapper } from './styles';\n\nconst columns = [\n  {\n    text: 'Robin'\n  },\n  {\n    text: 'Daisy'\n  },\n  {\n    text: 'Michael'\n  }\n]\n\nconst events = [\n  { from: '08:00', to: '09:15', column: 1, content: 'Has appointment with A' },\n  { from: '09:00', to: '12:00', column: 2, content: 'Has appointment with B' },\n  { from: '10:00', to: '12:15', column: 3, content: 'Has appointment with C' }\n];\n\nconst HomePage = () => {\n  return (\n    <MainLayout>\n      <Wrapper>\n        <Scheduler columns={columns} events={events} />\n      </Wrapper>\n    </MainLayout>\n  )\n}\n\nexport default HomePage;","import React from 'react';\n\nimport MainLayout from 'components/layouts/MainLayout';\n\nconst LoginPage = () => {\n  return (\n    <MainLayout>\n      Login Page\n    </MainLayout>\n  )\n}\n\nexport default LoginPage;","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\n\nimport history from 'browserHistory';\nimport HomePage from 'pages/HomePage';\nimport LoginPage from 'pages/LoginPage';\n\nconst App = () => {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path='/' exact component={HomePage} />\n        <Route path='/login' exact component={LoginPage} />\n      </Switch>\n    </Router>\n  ) \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}