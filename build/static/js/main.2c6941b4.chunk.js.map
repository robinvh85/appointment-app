{"version":3,"sources":["browserHistory.ts","components/layouts/MainLayout/styles.ts","components/layouts/TopMenu/styles.ts","components/layouts/TopMenu/index.tsx","components/layouts/MainLayout/index.tsx","pages/HomePage/index.tsx","pages/LoginPage/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["createBrowserHistory","Wrapper","styled","div","Header","Body","Footer","Menu","TopMenu","to","MainLayout","children","HomePage","LoginPage","App","history","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAEeA,gB,koBCAR,IAAMC,EAAUC,IAAOC,IAAV,KAKPC,EAASF,IAAOC,IAAV,KAWNE,GAHOH,IAAOC,IAAV,KAGGD,IAAOC,IAAV,MAOJG,EAASJ,IAAOC,IAAV,K,4PCvBZ,IAAMF,EAAUC,IAAOC,IAAV,KAMPI,EAAOL,IAAOC,IAAV,KCQFK,EAXC,WACd,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,YCaOC,EAdI,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SACpB,OACE,kBAACV,EAAD,KACE,kBAACG,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACC,EAAD,KACIM,GAEJ,kBAACL,EAAD,iBCNSM,EARE,WACf,OACE,kBAAC,EAAD,KACE,4CCKSC,EARG,WAChB,OACE,kBAAC,EAAD,oBCYWC,EAXH,WACV,OACE,kBAAC,IAAD,CAAQC,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,KAAK,SAASC,OAAK,EAACC,UAAWL,OCA1BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c6941b4.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  background-color: white;\n  width: 100%;\n`;\n\nexport const Header = styled.div`\n  background-color: grey;\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n`;\n\nexport const Menu = styled.div`\n`;\n\nexport const Body = styled.div`\n  background-color: silver;\n  height: 80vh;\n  padding-top: 50px;\n  padding-bottom: 50px;\n`;\n\nexport const Footer = styled.div`\n  background-color: salmon;\n  height: 50px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  height: 50px;\n  line-height: 50px;\n  vertical-align: middle;\n`;\n\nexport const Menu = styled.div`\n  a {\n    margin-left: 20px;\n  }\n`;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Wrapper, Menu } from './styles';\n\nconst TopMenu = () => {\n  return (\n    <Wrapper>\n      <Menu>\n        <Link to='/'>Home</Link>\n        <Link to='/login'>Login</Link>\n      </Menu>\n    </Wrapper>\n  )\n}\n\nexport default TopMenu;","import React from 'react';\n\nimport { Wrapper, Body, Header, Footer } from './styles';\nimport TopMenu from 'components/layouts/TopMenu';\n\ntype Props = {\n  children: any\n}\n\nconst MainLayout = ({ children }: Props) => {\n  return (\n    <Wrapper>\n      <Header>\n        <TopMenu />\n      </Header>\n      <Body>\n        { children }\n      </Body>\n      <Footer>Footer</Footer>\n    </Wrapper>\n  );\n}\n\nexport default MainLayout;","import React from 'react';\n\nimport MainLayout from 'components/layouts/MainLayout';\n\nconst HomePage = () => {\n  return (\n    <MainLayout>\n      <div>Home Page</div>\n    </MainLayout>\n  )\n}\n\nexport default HomePage;","import React from 'react';\n\nimport MainLayout from 'components/layouts/MainLayout';\n\nconst LoginPage = () => {\n  return (\n    <MainLayout>\n      Login Page\n    </MainLayout>\n  )\n}\n\nexport default LoginPage;","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\n\nimport history from 'browserHistory';\nimport HomePage from 'pages/HomePage';\nimport LoginPage from 'pages/LoginPage';\n\nconst App = () => {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path='/' exact component={HomePage} />\n        <Route path='/login' exact component={LoginPage} />\n      </Switch>\n    </Router>\n  ) \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}